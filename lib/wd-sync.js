// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, Fiber, current, eventEmitterMethods, isElement, k, makeSync, mixedArgsMethods, patch, sync, syncOptions, v, wd, wdSync, wrapAsync, wrapSync, _, _ref,
    __slice = [].slice;

  Fiber = require('fibers');

  wd = require('wd');

  _ = require("lodash");

  _ref = require('make-sync'), makeSync = _ref.makeSync, sync = _ref.sync, current = _ref.current;

  EventEmitter = require('events').EventEmitter;

  mixedArgsMethods = ['executeAsync', 'safeExecuteAsync'];

  eventEmitterMethods = (function() {
    var _ref1, _results;
    _ref1 = EventEmitter.prototype;
    _results = [];
    for (k in _ref1) {
      v = _ref1[k];
      if (typeof v === 'function') {
        _results.push(k);
      }
    }
    return _results;
  })();

  syncOptions = {
    mode: 'sync',
    include: '*',
    exclude: mixedArgsMethods.concat(eventEmitterMethods.concat([/^_/, 'toString']))
  };

  wrapAsync = function(target) {
    var res;
    res = {};
    for (k in target) {
      v = target[k];
      if ((typeof v) === 'function') {
        (function() {
          var _v;
          _v = v;
          return res[k] = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return _v.apply(target, args);
          };
        })();
      }
    }
    return res;
  };

  isElement = function(obj) {
    return (obj != null ? obj.browser : void 0) != null;
  };

  wrapSync = function(target) {
    var wrappedTarget, _fn, _i, _len;
    target = wrapAsync(target);
    makeSync(target, syncOptions);
    _fn = function() {
      return target[k] = makeSync(target[k], {
        mode: ['mixed', 'args']
      });
    };
    for (_i = 0, _len = mixedArgsMethods.length; _i < _len; _i++) {
      k = mixedArgsMethods[_i];
      _fn();
    }
    wrappedTarget = {};
    for (k in target) {
      v = target[k];
      if ((typeof v) === 'function') {
        (function() {
          var _v;
          _v = v;
          return wrappedTarget[k] = function() {
            var args, raw, res;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            res = _v.apply(target, args);
            if (isElement(res)) {
              raw = res;
              res = wrapSync(res);
              res.rawElement = raw;
            }
            if (_(res).isArray()) {
              res = _.map(res, function(val) {
                if (isElement(val)) {
                  raw = val;
                  val = wrapSync(val);
                  val.rawElement = raw;
                }
                return val;
              });
            }
            return res;
          };
        })();
      }
    }
    return wrappedTarget;
  };

  patch = function(browser) {
    var _sync;
    browser = wrapSync(browser);
    _sync = function(cb) {
      if (cb != null) {
        return sync(function() {
          current().wd_sync_browser = browser;
          return cb.apply(browser, []);
        });
      }
    };
    return {
      browser: browser,
      sync: _sync
    };
  };

  wdSync = {
    SPECIAL_KEYS: wd.SPECIAL_KEYS,
    asserters: wd.asserters,
    remote: function() {
      var args, browser;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      browser = wd.remote.apply(wd, args);
      return patch(browser);
    },
    current: function() {
      return current().wd_sync_browser;
    },
    sleep: function(ms) {
      var fiber;
      fiber = current();
      setTimeout(function() {
        return fiber.run();
      }, ms);
      return Fiber["yield"]();
    },
    wrap: function(globalOptions) {
      return function(options, cb) {
        var _ref1;
        if (typeof options === 'function') {
          _ref1 = [null, options], options = _ref1[0], cb = _ref1[1];
        }
        return function(done) {
          if ((globalOptions != null ? globalOptions.pre : void 0) != null) {
            globalOptions.pre.apply(this, []);
          }
          if ((options != null ? options.pre : void 0) != null) {
            options.pre.apply(this, []);
          }
          return sync(function() {
            var e;
            try {
              current().wd_sync_browser = globalOptions != null ? typeof globalOptions["with"] === "function" ? globalOptions["with"]() : void 0 : void 0;
              cb.apply(globalOptions != null ? typeof globalOptions["with"] === "function" ? globalOptions["with"]() : void 0 : void 0, []);
              return typeof done === "function" ? done() : void 0;
            } catch (_error) {
              e = _error;
              return typeof done === "function" ? done(e) : void 0;
            }
          });
        };
      };
    }
  };

  module.exports = wdSync;

}).call(this);
